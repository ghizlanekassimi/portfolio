{"ast":null,"code":"import { AnimationType } from '../render/utils/types.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { useMemo } from 'react';\n\nfunction isMouseEvent(event) {\n  return event.type !== \"pen\" && event.type !== \"touch\";\n}\n\nfunction createHoverEvent(visualElement, isActive, callback) {\n  return (event, info) => {\n    if (!isMouseEvent(event) || isDragActive()) return;\n    /**\n     * Ensure we trigger animations before firing event callback\n     */\n\n    if (visualElement.animationState) {\n      visualElement.animationState.setActive(AnimationType.Hover, isActive);\n    }\n\n    callback && callback(event, info);\n  };\n}\n\nfunction useHoverGesture(_ref) {\n  let {\n    onHoverStart,\n    onHoverEnd,\n    whileHover,\n    visualElement\n  } = _ref;\n  usePointerEvent(visualElement, \"pointerenter\", useMemo(() => {\n    return onHoverStart || whileHover ? createHoverEvent(visualElement, true, onHoverStart) : undefined;\n  }, [onHoverStart, Boolean(whileHover), visualElement]), {\n    passive: !onHoverStart\n  });\n  usePointerEvent(visualElement, \"pointerleave\", useMemo(() => {\n    return onHoverEnd || whileHover ? createHoverEvent(visualElement, false, onHoverEnd) : undefined;\n  }, [onHoverStart, Boolean(whileHover), visualElement]), {\n    passive: !onHoverEnd\n  });\n}\n\nexport { useHoverGesture };","map":{"version":3,"sources":["D:/Documents/GI4/s7/React/portfolio-ghiz/node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs"],"names":["AnimationType","usePointerEvent","isDragActive","useMemo","isMouseEvent","event","type","createHoverEvent","visualElement","isActive","callback","info","animationState","setActive","Hover","useHoverGesture","onHoverStart","onHoverEnd","whileHover","undefined","Boolean","passive"],"mappings":"AAAA,SAASA,aAAT,QAA8B,2BAA9B;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,OAAT,QAAwB,OAAxB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,SAAOA,KAAK,CAACC,IAAN,KAAe,KAAf,IAAwBD,KAAK,CAACC,IAAN,KAAe,OAA9C;AACH;;AACD,SAASC,gBAAT,CAA0BC,aAA1B,EAAyCC,QAAzC,EAAmDC,QAAnD,EAA6D;AACzD,SAAO,CAACL,KAAD,EAAQM,IAAR,KAAiB;AACpB,QAAI,CAACP,YAAY,CAACC,KAAD,CAAb,IAAwBH,YAAY,EAAxC,EACI;AACJ;AACR;AACA;;AACQ,QAAIM,aAAa,CAACI,cAAlB,EAAkC;AAC9BJ,MAAAA,aAAa,CAACI,cAAd,CAA6BC,SAA7B,CAAuCb,aAAa,CAACc,KAArD,EAA4DL,QAA5D;AACH;;AACDC,IAAAA,QAAQ,IAAIA,QAAQ,CAACL,KAAD,EAAQM,IAAR,CAApB;AACH,GAVD;AAWH;;AACD,SAASI,eAAT,OAAmF;AAAA,MAA1D;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA,UAA5B;AAAwCV,IAAAA;AAAxC,GAA0D;AAC/EP,EAAAA,eAAe,CAACO,aAAD,EAAgB,cAAhB,EAAgCL,OAAO,CAAC,MAAM;AACzD,WAAOa,YAAY,IAAIE,UAAhB,GACDX,gBAAgB,CAACC,aAAD,EAAgB,IAAhB,EAAsBQ,YAAtB,CADf,GAEDG,SAFN;AAGH,GAJqD,EAInD,CAACH,YAAD,EAAeI,OAAO,CAACF,UAAD,CAAtB,EAAoCV,aAApC,CAJmD,CAAvC,EAIyC;AAAEa,IAAAA,OAAO,EAAE,CAACL;AAAZ,GAJzC,CAAf;AAKAf,EAAAA,eAAe,CAACO,aAAD,EAAgB,cAAhB,EAAgCL,OAAO,CAAC,MAAM;AACzD,WAAOc,UAAU,IAAIC,UAAd,GACDX,gBAAgB,CAACC,aAAD,EAAgB,KAAhB,EAAuBS,UAAvB,CADf,GAEDE,SAFN;AAGH,GAJqD,EAInD,CAACH,YAAD,EAAeI,OAAO,CAACF,UAAD,CAAtB,EAAoCV,aAApC,CAJmD,CAAvC,EAIyC;AAAEa,IAAAA,OAAO,EAAE,CAACJ;AAAZ,GAJzC,CAAf;AAKH;;AAED,SAASF,eAAT","sourcesContent":["import { AnimationType } from '../render/utils/types.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { useMemo } from 'react';\n\nfunction isMouseEvent(event) {\n    return event.type !== \"pen\" && event.type !== \"touch\";\n}\nfunction createHoverEvent(visualElement, isActive, callback) {\n    return (event, info) => {\n        if (!isMouseEvent(event) || isDragActive())\n            return;\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Hover, isActive);\n        }\n        callback && callback(event, info);\n    };\n}\nfunction useHoverGesture({ onHoverStart, onHoverEnd, whileHover, visualElement, }) {\n    usePointerEvent(visualElement, \"pointerenter\", useMemo(() => {\n        return onHoverStart || whileHover\n            ? createHoverEvent(visualElement, true, onHoverStart)\n            : undefined;\n    }, [onHoverStart, Boolean(whileHover), visualElement]), { passive: !onHoverStart });\n    usePointerEvent(visualElement, \"pointerleave\", useMemo(() => {\n        return onHoverEnd || whileHover\n            ? createHoverEvent(visualElement, false, onHoverEnd)\n            : undefined;\n    }, [onHoverStart, Boolean(whileHover), visualElement]), { passive: !onHoverEnd });\n}\n\nexport { useHoverGesture };\n"]},"metadata":{},"sourceType":"module"}