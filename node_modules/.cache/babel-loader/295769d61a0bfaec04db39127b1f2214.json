{"ast":null,"code":"import { warning } from 'hey-listen';\nimport { secondsToMilliseconds } from '../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from './waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from './create-instant-animation.mjs';\nimport { animate } from './legacy-popmotion/index.mjs';\nimport { inertia } from './legacy-popmotion/inertia.mjs';\nimport { getDefaultTransition } from './utils/default-transitions.mjs';\nimport { isAnimatable } from './utils/is-animatable.mjs';\nimport { getKeyframes } from './utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from './utils/transitions.mjs';\n\nconst createMotionValueAnimation = function (valueName, value, target) {\n  let transition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return onComplete => {\n    const valueTransition = getValueTransition(transition, valueName) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n\n    let {\n      elapsed = 0\n    } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    const keyframes = getKeyframes(value, valueName, target, valueTransition);\n    /**\n     * Check if we're able to animate between the start and end keyframes,\n     * and throw a warning if we're attempting to animate between one that's\n     * animatable and another that isn't.\n     */\n\n    const originKeyframe = keyframes[0];\n    const targetKeyframe = keyframes[keyframes.length - 1];\n    const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n    const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n    let options = {\n      keyframes,\n      velocity: value.getVelocity(),\n      ...valueTransition,\n      elapsed,\n      onUpdate: v => {\n        value.set(v);\n        valueTransition.onUpdate && valueTransition.onUpdate(v);\n      },\n      onComplete: () => {\n        onComplete();\n        valueTransition.onComplete && valueTransition.onComplete();\n      }\n    };\n\n    if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false) {\n      /**\n       * If we can't animate this value, or the global instant animation flag is set,\n       * or this is simply defined as an instant transition, return an instant transition.\n       */\n      return createInstantAnimation(options);\n    } else if (valueTransition.type === \"inertia\") {\n      /**\n       * If this is an inertia animation, we currently don't support pre-generating\n       * keyframes for this as such it must always run on the main thread.\n       */\n      const animation = inertia(options);\n      return () => animation.stop();\n    }\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unqiue transition settings for this value.\n     */\n\n\n    if (!isTransitionDefined(valueTransition)) {\n      options = { ...options,\n        ...getDefaultTransition(valueName, options)\n      };\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n\n\n    if (options.duration) {\n      options.duration = secondsToMilliseconds(options.duration);\n    }\n\n    if (options.repeatDelay) {\n      options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n\n    const visualElement = value.owner;\n    const element = visualElement && visualElement.current;\n    /**\n     * Animate via WAAPI if possible.\n     */\n\n    if (visualElement && element instanceof HTMLElement && !(visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onUpdate)) {\n      const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n      if (acceleratedAnimation) return acceleratedAnimation;\n    }\n    /**\n     * If we didn't create an accelerated animation, create a JS animation\n     */\n\n\n    const animation = animate(options);\n    return () => animation.stop();\n  };\n};\n\nexport { createMotionValueAnimation };","map":{"version":3,"sources":["D:/Documents/GI4/s7/React/portfolio-ghiz/node_modules/framer-motion/dist/es/animation/index.mjs"],"names":["warning","secondsToMilliseconds","instantAnimationState","createAcceleratedAnimation","createInstantAnimation","animate","inertia","getDefaultTransition","isAnimatable","getKeyframes","getValueTransition","isTransitionDefined","createMotionValueAnimation","valueName","value","target","transition","onComplete","valueTransition","delay","elapsed","keyframes","originKeyframe","targetKeyframe","length","isOriginAnimatable","isTargetAnimatable","options","velocity","getVelocity","onUpdate","v","set","current","type","animation","stop","duration","repeatDelay","visualElement","owner","element","HTMLElement","getProps","acceleratedAnimation"],"mappings":"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","sourcesContent":["import { warning } from 'hey-listen';\nimport { secondsToMilliseconds } from '../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from './waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from './create-instant-animation.mjs';\nimport { animate } from './legacy-popmotion/index.mjs';\nimport { inertia } from './legacy-popmotion/inertia.mjs';\nimport { getDefaultTransition } from './utils/default-transitions.mjs';\nimport { isAnimatable } from './utils/is-animatable.mjs';\nimport { getKeyframes } from './utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from './utils/transitions.mjs';\n\nconst createMotionValueAnimation = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ...valueTransition,\n            elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(options);\n        }\n        else if (valueTransition.type === \"inertia\") {\n            /**\n             * If this is an inertia animation, we currently don't support pre-generating\n             * keyframes for this as such it must always run on the main thread.\n             */\n            const animation = inertia(options);\n            return () => animation.stop();\n        }\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        const visualElement = value.owner;\n        const element = visualElement && visualElement.current;\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (visualElement &&\n            element instanceof HTMLElement &&\n            !(visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onUpdate)) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        const animation = animate(options);\n        return () => animation.stop();\n    };\n};\n\nexport { createMotionValueAnimation };\n"]},"metadata":{},"sourceType":"module"}